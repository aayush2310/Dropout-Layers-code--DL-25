import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Dropout
from tensorflow.keras.optimizers import Adam
from sklearn.model_selection import train_test_split
from sklearn.metrices import mean_squared_error

X_train=np.linspace(-1,1,20)

y_train=np.array([-0.6561,-0.3099,-0.59035,-0.50855,-0.285,-0.2443,-0.02445,0.00135,-0.2006,0.07475,-0.1422,0.06515,0.15265,0.3521,0.28415,0.5524,0.23115,0.20835,0.4211,
                    0.60485])
                    


X_test=np.linspace(-1,1,20)

y_test=np.array([-0.6591,-0.3899,-0.69035,-0.10855,-0.185,-0.1443,-0.12445,0.20135,-0.2306,0.07675,-0.12422,0.07515,0.15165,0.3421,0.18415,0.1524,0.21115,0.10835,0.4111,
                    0.60487])
                    
                    
plt.scatter(X_train,y_train,c='black',label='Train')
plt.scatter(X_test,y_test,c='red',label='Test')
plt.legend()
plt.show()

#REGRESSION MODEL

model=Sequential()
model.add(Dense(128,input_dim=1,activation="relu"))
model.add(Dense(128,activation="relu"))
model.add(Dense(1,activation="linear"))

adam=Adam(learning_rate=0.01)
model.compile(loss='mse',optimizer=adam,metrices=['mse'])
history=model.fit(X_train,y_train,epochs=500,validation_data=(X_test,y_test),verbose=False)

#evaluate the model

_, train_mse=model.evaluate(X_train,y_train,verbose=0)
_, test_mse=model.evaluate(X_test,y_test,verbose=0)
print('Train: {},Test: {}'.format(train_mse,test_mse))

y_pred=model.predict(X_test)

plt.figure()
plt.scatter(X_train,y_train,c='black',label='Train')
plt.scatter(X_test,y_test,c='red',label='Test')
plt.plot(X_test,y_pred)
plt.legend()
plt.ylim((-1.5,1.5))
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])

#OVERFITTING IS TAKING PLACE-WILL SOLVE USING DROPOUTS
#DROPOUT MODEL

model=Sequential()
model.add(Dense(128,input_dim=1,activation="relu"))
model.add(Dropout(0.2))
model.add(Dense(128,activation="relu"))
model.add(Dropout(0.2))
model.add(Dense(1,activation="linear"))

adam=Adam(learning_rate=0.01)
model.compile(loss='mse',optimizer=adam,metrices=['mse'])

history=model.fit(X_train,y_train,epochs=500,validation_data=(X_test,y_test),verbose=False)

_, train_mse=model.evaluate(X_train,y_train,verbose=0)
_, test_mse=model.evaluate(X_test,y_test,verbose=0)
print('Train: {},Test: {}'.format(train_mse,test_mse))

y_pred=model.predict(X_test)

plt.figure()
plt.scatter(X_train,y_train,c='black',label='Train')
plt.scatter(X_test,y_test,c='red',label='Test')
plt.plot(X_test,y_pred)
plt.legend()
plt.ylim((-1.5,1.5))
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
